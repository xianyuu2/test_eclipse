package com.xtzx.part2;
//20190602
public class Abstract 
{

	public static void main(String[] args) 
	{
		//抽象
		//忽略问题中与当前目标无关的方面
		//只关注与当前目标有关的方面	
		
		//例子:钟表
		//数据:int  hour int mminute int second;
		//方法:settime();showtime();
		
		
		//封装:信息隐蔽技术:利用抽象数据类型将数据和基于数据的操作封装在一起
		//用户只能看到对象的封装界面信息,对象的内部细节对用户是隐蔽的
		//封装的的目的在于将对象的设计者和使用者分开,使用者不必知道行为实现的细节
		
		
		//继承:基于已有的类产生新类的机制
		//指新的类可以获得已有类(超类,基类,父类)的属性和行为,称新类为已有类的子类(也称为派生类)
		//子类继承了超类的特性,包括方法和实例变量
		//子类可以修改继承的方法或增加新的方法
		//以助于解决软件的可重用性的问题使程序结构清晰,降低了编码和维护的工作量
			//单继承:一个子类只有单一的直接超类
			//多继承:一个子类可以有多个以上的超类
			//java只支持单继承
		
		
		//多态性
		
		
		
		//类的声明
		/*[public公有类] [abstract抽象类|final终结类] class classTest [extends 父类名称] [implements 接口名称列表] 
		  {
			数据成员声明及初始化
			方法声明及方法体
		  }
		[]中的为可选项
		终结类无法被继承*/
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}

}
